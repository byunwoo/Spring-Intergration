<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	   					http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	
	<mvc:annotation-driven />
	
	<!--
	************************************************************************************** 
	<mvc:annotation-driven /> 을 설정함으로서 spring container가 자동으로 등록하는 빈 목록
	근데 테스트 해본 결과 conversion-service 라는 id의 빈은 등록이 되지 않았다.. 
	사용하고자 하면
	<bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	등록하고 <mvc:annotation-driven/>의 conversion-service=""속성에 아이디conversion-service를 설정해야 한다
	버전 차이인지는 확인해 볼 노릇
	
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="order" value="0" />
    </bean>
     
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="webBindingInitializer">
            <bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
                <property name="validator" ref="validator" />
                <property name="conversionService" ref="conversion-service"/>
            </bean>
        </property>
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
                <bean class="org.springframework.http.converter.StringHttpMessageConverter" >
                    <property name="writeAcceptCharset" value="false"/>
                </bean>
                <bean class="org.springframework.http.converter.ResourceHttpMessageConverter" />
                <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter" />
                <bean class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" />
                
                아래 4개의 컨버터는 해당 라이브러리가 클래스 경로에 있을 때 활성화 된다. 
               	<bean class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" />
               	오브젝트를 JSON으로 변환하고 그 반대의 경우에도 사용된다.
               	<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
               	<bean class="org.springframework.http.converter.feed.AtomFeedHttpMessageConverter" />
               	<bean class="org.springframework.http.converter.feed.RssChannelHttpMessageConverter" />
               	
            </list>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.handler.MappedInterceptor">
        <constructor-arg index="0"><null/></constructor-arg>
        <constructor-arg index="1">
            <bean class="org.springframework.web.servlet.handler.ConversionServiceExposingInterceptor">
                <constructor-arg index="0" ref="conversion-service"/>
            </bean>
        </constructor-arg>
    </bean>
    **************************************************************************************
	-->
	
	<context:annotation-config/>
	<!--
	@Component, @Service, @Controller, @Repository 
	위 애노테이션들은 스프링이 오토스케닝으로 객체를 등록할 수 있도록 할 때 사용된다.
	기능은 거의 같다고 보면 될 것 같으며 의미적으로 구분하여 사용하면 될 것같다.
	사견으로는 기능은 같아도 구분해서 사용하는 것이 더  좋을 것 같다. 

	
	
	어노테이션을 이용한 설정1 - context:annotation-config
	프레임웍 분석/spring
	* 필요한 환경 : jdk5.0 이상
	
	@Required
	목적 : 필수 프로퍼티를 지정 
	설정 위치 : setter메소드
	추가설정 : RequiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 해당 설정 대신에<context:annotation-config> 태그를 사용해도 된다.
	
	@Autowired
	목적 : 의존관계를 자동설정할 때 사용하며 타입을 이용하여 의존하는 객체를 삽입해 준다. 그러므로 해당 타입의 빈객체가 존재하지 않거나 또는 2개 이상 존재할 경우 스프링은 예외를 발생시키게 된다.
	설정 위치 : 생성자, 필드, 메소드(굳이 setter메소드가 아니여도 된다)
	추가설정 : AutowiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
	옵션 : required - @Autowired어노테이션을 적용한 프로퍼티에 대해 굳이 설정할 필요가 없는 경우에 false값을 주며 이때 해당 프로퍼티가 존재하지 않더라도 스프링은 예외를 발생시키지 않는다. 디폴트값은 true
	
	@Qualifier
	목적 : @Autowired의 목적에서 동일 타입의 빈객체가 존재시 특정빈을 삽입할 수 있게 설정한다. 
	설정위치 : @Autowired 어노테이션과 함께 사용된다.
	추가설정 : 동일타입의 빈객체 설정에서 <qualifier value="[alias명]" />를 추가하여 준다.
	옵션 : name - alias명
	
	@Resource
	목적 : 어플리케이션에서 필요로 하는 자원을 자동 연결(의존하는 빈 객체 전달)할 때 사용
	         @Autowired 와 같은 기능을 하며 @Autowired와 차이점은 @Autowired는 타입으로(by type),  @Resource는 이름으로(by name)으로 연결시켜준다는 것이다.
	설정위치 : 프로퍼티, setter메소드
	추가설정 : CommonAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
	옵션 : name 
	
	@PostConstruct
	목적 : 의존하는 객체를 설정한 이후에 초기화 작업을 수행하기 위해 사용
	설정위치 : 초기화 작업 수행 메소드
	추가설정 : CommonAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
	
	@PreConstruct
	목적 : 컨테이너에서 객체를 제거하기 전에 해야할 작업을 수행하기 위해 사용
	설정위치 : 해당 작업 메소드
	추가설정 : CommonAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
	-->
	
	<!-- DefaultAnnotationHandlerMapping 사용 -->
	<context:component-scan base-package="springframework.*">
		<context:exclude-filter type="regex" expression="springframework.ampq.helloworld.*"/>
	</context:component-scan>
	<!-- 
	DispatcherServlet에 Client 로부터 HttpRequest 가 들어 오면 HandlerMapping은 요청처리를 담당할 Controller 를 mapping 한다. 
	Spring MVC는 interface 인 HandlerMapping의 구현 클래스도 가지고 있는데, 용도에 따라 여러 개의 HandlerMapping을 사용하는 것도 가능하다. 
	빈 정의 파일에 HandlerMapping에 대한 정의가 없다면 Spring MVC는 기본(default) HandlerMapping을 사용한다. 
	기본 HandlerMapping은 BeanNameUrlHandlerMapping이며, jdk1.5 이상의 실행환경이면, DefaultAnnotationHandlerMapping도 기본 HandlerMapping이다.
	
	하지만, SimpleUrlHandlerMapping 같은 다른 HandlerMapping과 같이 써야 한다면, 
	디폴트HandlerMapping도 빈정의가 되어야 한다. 
	
	위에 <mvc:annotation-driven />을 선언함으로써 
	org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping
	, org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter
	가 자동 등록 됬다.
	
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="order" value="0"></property>
	</bean> 
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
	-->
	 
	<!-- <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"></bean> -->
	  
	<!-- 
		SimpleUrlHandlerMapping 사용 Adapter 도 등록한다. 
		annotation 을 사용하지 않을경우 spring dispatcher 내부적으로 SimpleControllerHandlerAdapter를 호출한다.
		하지만 annotation 과 함께 사용할 경우 명시적으로 빈을 등록하지 않으면 핸들아답터를 찾지 못한다는 오류가 발생한다.
	-->
	<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/simpleUrlHandlerMapping/*">simpleUrlHandlerClass</prop>
			</props>
		</property>
		<property name="order" value="1"/>
	</bean> 
	
	<import resource="dbManager.xml"/>
	
	<import resource="viewResolver.xml"/>
	
	<import resource="springMobile.xml"/>
	
	<import resource="springSecurity.xml"/>
	
	<!-- <import resource="exceptionResolver.xml"/> -->
	
</beans>
